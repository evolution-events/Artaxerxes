# Generated by Django 2.2.12 on 2020-04-13 21:17

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='ArtaUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(max_length=64, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('consent_announcements', models.BooleanField(default=False, help_text='Keep me updated about new events. You will receive at most a few e-mails each year', verbose_name='Send updates')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MedicalDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food_allergies', models.TextField(blank=True, help_text='Please specify any allergies that our kitchen staff should take into account. Please also mention the severity. Do not use this field for food you dislike, only enter things that can cause real problems. Leave blank when you have no allergies. ', verbose_name='Food allergies')),
                ('event_risks', models.TextField(blank=True, help_text='Please specify any medical or psychological conditions that we should take into account while preparing for the event. For example if you are allergic to smoke machines, can not handle flashes of light, are claustrophobic etc. Leave blank when there is nothing to mention.', verbose_name='Take into account for event')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='medical_details', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'medical details',
                'verbose_name_plural': 'medical details',
            },
        ),
        migrations.CreateModel(
            name='EmergencyContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_name', models.CharField(max_length=100, verbose_name='Name of contact')),
                ('relation', models.CharField(blank=True, help_text='Optional. For example: parent, partner, friend, etc.', max_length=100, verbose_name='Relation to contact')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, verbose_name='Phone number of contact')),
                ('remarks', models.CharField(blank=True, help_text='Optional. For example: Only call if #1 cannot be reached', max_length=200, verbose_name='Remarks')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emergency_contacts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'contact',
                'verbose_name_plural': 'contacts',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, verbose_name='Phone number')),
                ('address', models.CharField(blank=True, help_text='Optional', max_length=100, verbose_name='Address')),
                ('postalcode', models.CharField(blank=True, help_text='Optional', max_length=10, verbose_name='Postal code')),
                ('city', models.CharField(blank=True, help_text='Optional', max_length=100, verbose_name='City of residence')),
                ('country', models.CharField(blank=True, help_text='Optional', max_length=100, verbose_name='Country')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'address',
                'verbose_name_plural': 'addresses',
            },
        ),
        migrations.AddConstraint(
            model_name='medicaldetails',
            constraint=models.CheckConstraint(check=models.Q(('event_risks', ''), ('food_allergies', ''), _negated=True), name='medical_details_not_empty'),
        ),
    ]
